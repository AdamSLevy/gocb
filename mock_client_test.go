// Code generated by mockery v1.0.0. DO NOT EDIT.

package gocb

import mock "github.com/stretchr/testify/mock"

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

// Hash provides a mock function with given fields:
func (_m *mockClient) Hash() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// buildConfig provides a mock function with given fields:
func (_m *mockClient) buildConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// close provides a mock function with given fields:
func (_m *mockClient) close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// connect provides a mock function with given fields:
func (_m *mockClient) connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// connected provides a mock function with given fields:
func (_m *mockClient) connected() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getAnalyticsProvider provides a mock function with given fields:
func (_m *mockClient) getAnalyticsProvider() (analyticsProvider, error) {
	ret := _m.Called()

	var r0 analyticsProvider
	if rf, ok := ret.Get(0).(func() analyticsProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(analyticsProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getBootstrapError provides a mock function with given fields:
func (_m *mockClient) getBootstrapError() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// getDiagnosticsProvider provides a mock function with given fields:
func (_m *mockClient) getDiagnosticsProvider() (diagnosticsProvider, error) {
	ret := _m.Called()

	var r0 diagnosticsProvider
	if rf, ok := ret.Get(0).(func() diagnosticsProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(diagnosticsProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getHTTPProvider provides a mock function with given fields:
func (_m *mockClient) getHTTPProvider() (httpProvider, error) {
	ret := _m.Called()

	var r0 httpProvider
	if rf, ok := ret.Get(0).(func() httpProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httpProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getKvProvider provides a mock function with given fields:
func (_m *mockClient) getKvProvider() (kvProvider, error) {
	ret := _m.Called()

	var r0 kvProvider
	if rf, ok := ret.Get(0).(func() kvProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kvProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getQueryProvider provides a mock function with given fields:
func (_m *mockClient) getQueryProvider() (queryProvider, error) {
	ret := _m.Called()

	var r0 queryProvider
	if rf, ok := ret.Get(0).(func() queryProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queryProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getSearchProvider provides a mock function with given fields:
func (_m *mockClient) getSearchProvider() (searchProvider, error) {
	ret := _m.Called()

	var r0 searchProvider
	if rf, ok := ret.Get(0).(func() searchProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(searchProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getViewProvider provides a mock function with given fields:
func (_m *mockClient) getViewProvider() (viewProvider, error) {
	ret := _m.Called()

	var r0 viewProvider
	if rf, ok := ret.Get(0).(func() viewProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(viewProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getWaitUntilReadyProvider provides a mock function with given fields:
func (_m *mockClient) getWaitUntilReadyProvider() (waitUntilReadyProvider, error) {
	ret := _m.Called()

	var r0 waitUntilReadyProvider
	if rf, ok := ret.Get(0).(func() waitUntilReadyProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(waitUntilReadyProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// setBootstrapError provides a mock function with given fields: err
func (_m *mockClient) setBootstrapError(err error) {
	_m.Called(err)
}

// supportsGCCCP provides a mock function with given fields:
func (_m *mockClient) supportsGCCCP() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
